[编程题] 重排数列
小易有一个长度为N的正整数数列A = {A[1], A[2], A[3]..., A[N]}。
牛博士给小易出了一个难题:
对数列A进行重新排列,使数列A满足所有的A[i] * A[i + 1](1 ≤ i ≤ N - 1)都是4的倍数。
小易现在需要判断一个数列是否可以重排之后满足牛博士的要求。 
输入描述:
输入的第一行为数列的个数t(1 ≤ t ≤ 10),
接下来每两行描述一个数列A,第一行为数列长度n(1 ≤ n ≤ 10^5)
第二行为n个正整数A[i](1 ≤ A[i] ≤ 10^9)


输出描述:
对于每个数列输出一行表示是否可以满足牛博士要求,如果可以输出Yes,否则输出No。

输入例子1:
2
3
1 10 100
4
1 2 3 4

输出例子1:
Yes
No

import java.util.Scanner;

public class Main5 {
			
			public static void main(String[] args){				
				 Scanner x=new Scanner(System.in);//构造
				 int t=x.nextInt();//数组个数	
				
				
				 int[] num;
				 for(int q=0;q<t;q++)//循环输入数组
				 {	int sd=x.nextInt();	
				 	num=new int[sd];
				 	int m=sd;
				 	 
				 	int temp=0,jishu=0,oushu=0,jk=0;
				 	for(int tk=0;tk<sd;tk++){
				 	num[tk]=Integer.parseInt(x.next());
				 	if(num[tk]%4==0){
						 temp++;
						}
					if(num[tk]%2!=0){
						 jishu++;
						}
					if(num[tk]%2==0){
						oushu++;
						
					}
					
				 	}
				 
				 	if(temp>=(m-1)/2)
						jk=1;
				 	else if((temp>=jishu)&&(oushu>=2))
				 		jk=1;
					 else
						 jk=0;
				 	if(jk==1)
						System.out.println("Yes");
				 	if(jk==0)
				 		System.out.println("No");
				}}}
			
		

